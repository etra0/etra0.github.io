<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Sebastián Aedo&#39;s blog</title>
    
    
    
    <link>https://blog.etra0.cl/tags/rust/</link>
    <description>Recent content in Rust on Sebastián Aedo&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 06 Dec 2020 23:19:23 -0300</lastBuildDate>
    
	<atom:link href="https://blog.etra0.cl/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>memory-rs: going internal &amp; Yakuza Like A Dragon Photo Mode</title>
      <link>https://blog.etra0.cl/posts/2020-12-06-memory-rs-internal/</link>
      <pubDate>Sun, 06 Dec 2020 23:19:23 -0300</pubDate>
      
      <guid>https://blog.etra0.cl/posts/2020-12-06-memory-rs-internal/</guid>
      <description>
        
          &lt;img src=&#34;https://blog.etra0.cl/assets/images/memory-rs/cover.png&#34;/&gt;
          
        
        
        
          &lt;p&gt;Habiendo comenzado a experimentar con hacking interno  a través de inyección de
DLLs, y mientras esperaba la salida del juego &lt;em&gt;Yakuza: Like A Dragon&lt;/em&gt;,
aproveché de comenzar a preparar mi librería &lt;code&gt;memory-rs&lt;/code&gt; para por fin comenzar
a utilizar hacking interno, que por lo general conllevaba más trabajo preparar
el boilerplate pero al final traía muchos más beneficios.&lt;/p&gt;
&lt;h1 id=&#34;evolución-de-memory-rs&#34;&gt;Evolución de &lt;em&gt;memory-rs&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/etra0/memory-rs/commit/d9c9521907bd9bb5ce35447b12a27830e8dbf9d1&#34;&gt;A partir del 27 de
octubre&lt;/a&gt;,
comencé a trabajar casi todos los días en esta librería, porque cada vez me
fascinaba más las posibles técnicas que se pueden utilizar al estar dentro
del mismo espacio de memoria que el proceso objetivo, por lo que era necesario
construir un toolkit para evitar ser redundante en futuras ocasiones.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Quién necesita Matplotlib si tenemos el Administrador de Tareas</title>
      <link>https://blog.etra0.cl/posts/2020-06-26-taskmgr/</link>
      <pubDate>Fri, 26 Jun 2020 15:40:55 -0400</pubDate>
      
      <guid>https://blog.etra0.cl/posts/2020-06-26-taskmgr/</guid>
      <description>
        
          &lt;img src=&#34;https://blog.etra0.cl/assets/images/taskmgr/out.gif&#34;/&gt;
          
        
        
        
          &lt;h2 id=&#34;el-fin-justifica-los-medios-&#34;&gt;El fin justifica los medios (?)&lt;/h2&gt;
&lt;p&gt;Obviamente mi objetivo no era simplemente dibujar senos en el Administrador
de Tareas &lt;del&gt;aunque fue entretenido&lt;/del&gt;, si no que este fue el &lt;em&gt;medio&lt;/em&gt; para
concretar mi fin: &lt;strong&gt;Aprender sobre hacking interno inyectando DLLs&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;hacking-interno-sharing-the-space&#34;&gt;Hacking interno: Sharing the space&lt;/h1&gt;
&lt;p&gt;Como comenté en un blog previo, el hacking externo es entre comillas
&lt;em&gt;&amp;ldquo;fácil de concretar&amp;rdquo;&lt;/em&gt;, ya que requiere mucho menos boilerplate, y la
WinAPI provee las funciones necesarias para leer y modificar la memoria
de un proceso externo sin mayor problemas, así que para cosas rápidas
a veces es más fácil ir por este camino, pero lo que yo no sabía eran
todas las ventajas que se tenían al hacer las cosas de forma &lt;em&gt;interna&lt;/em&gt;.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Creando mi propio Photo Mode para Yakuza Kiwami 2</title>
      <link>https://blog.etra0.cl/posts/2020-05-28-photo-mode/</link>
      <pubDate>Thu, 28 May 2020 14:08:01 -0400</pubDate>
      
      <guid>https://blog.etra0.cl/posts/2020-05-28-photo-mode/</guid>
      <description>
        
          &lt;img src=&#34;https://blog.etra0.cl/assets/images/photomode/kiryu.jpg&#34;/&gt;
          
        
        
        
          &lt;h1 id=&#34;resultados&#34;&gt;Resultados&lt;/h1&gt;
&lt;p&gt;Para captar tu atención, acá están los resultados de un Photo Mode
implementado en Rust.&lt;/p&gt;
&lt;style&gt;
.video-container {
    text-align: center;

}
&lt;/style&gt;
&lt;div class=&#34;video-container&#34;&gt;
	&lt;video  width=&#34;100%&#34; 
		 controls  loop&gt;
		&lt;source src=&#34;https://blog.etra0.cl/assets/images/photomode/freecam_0.mp4&#34;&gt;
	&lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;Habiendo terminado el Yakuza 0 &lt;em&gt;(what a great game)&lt;/em&gt; y el Yakuza Kiwami
&lt;em&gt;(not so great tbh)&lt;/em&gt;, naturalmente, el siguiente juego era Yakuza Kiwami 2.&lt;/p&gt;
&lt;p&gt;Yakuza Kiwami 2 es conocido por tener un rendimiento no muy bueno, incluso
un modder por el nombre de &lt;a href=&#34;https://cookieplmonster.github.io/2020/01/18/silentpatch-yakuza-kiwami-2/&#34;&gt;Silent&lt;/a&gt;
hizo un parche para mejorar el &lt;em&gt;frame pacing&lt;/em&gt;, donde se dio cuenta que para
limitar el framerate usaron un &lt;code&gt;sleep&lt;/code&gt; (&lt;code&gt;sleep&lt;/code&gt; &lt;strong&gt;nunca&lt;/strong&gt; es confiable debido
a que depende del scheduler de Windows), sin embargo, a pesar de estos
problemas, el juego se ve increible. Quedé inmediatamente impresionado por los
gráficos, tiene un &lt;em&gt;look&lt;/em&gt; que a mi por lo menos me atrae bastante.&lt;/p&gt;
          
        
        </description>
    </item>
    
  </channel>
</rss>